---
layout: doc-page
title: Python
weight: 1
---

AppFog currently supports Python 2.7.3. You can check the available runtimes by running `af runtimes`.

{: .prettyprint}
    $ af runtimes
    
    +--------------+-----------------+-----------+
    | Name         | Description     | Version   |
    +--------------+-----------------+-----------+
    | java         | Java 7          | 1.7.0     |
    | php          | PHP 5           | 5.3       |
    | ruby18       | Ruby 1.8.7      | 1.8.7     |
    | ruby192      | Ruby 1.9.2      | 1.9.2p180 |
    | ruby193      | Ruby 1.9.3 p125 | 1.9.3     |
    | python2      | Python 2.7.3    | 2.7.3     |
    | node04       | Node.js 0.4.12  | 0.4.12    |
    | node06       | Node.js 0.6.17  | 0.6.17    |
    | erlangR14B02 | Erlang R14B02   | R14B02    |
    +--------------+-----------------+-----------+

AppFog supports Python by serving apps through the [WSGI](http://wsgi.readthedocs.org/en/latest/index.html) protocol using [Gunicorn](http://gunicorn.org/). 

### Dependencies

You can define the package prequisites of your Python app in a top-level [requirements.txt]() file, which `pip` uses to install dependencies. AppFog never caches package dependencies and instead downloads and installs them every time you update or restart your app. 

AppFog uses pip and virtualenv. 

# Services

You can connect your Python app to AppFog services by using accessing the `VCAP_SERVICES` environment variable, which becomes available to your app when you bind a service to it. For more information on this, check out our [Services Overview](/services/overview) page.

# WSGI "Hello World"

You can take a look at a bare-bones Python WSGI app [on GitHub](https://github.com/appfog/af-python-wsgi).

# Flask {#flask}

The following is a step-by-step guide to writing and deploying a "hello world" Python Flask app:

### Create the App

Create a directory for the app and change into it: 

{: .prettyprint}
    $ mkdir flask-example
    $ cd flask-example

### Prepare Your Environment

Create a `virtualenv` environment:

{: .prettyprint}
    $ virtualenv venv
    New python executable in venv/bin/python
    Installing setuptools............done.
    Installing pip...............done.

Activate the environment:

{: .prettyprint}
    $ . venv/bin/activate
    (venv) $

Use `pip` to install Flask:

{: .prettyprint}
    (venv) $ pip install Flask
    Downloading/unpacking Flask
    Downloading Flask-0.9.tar.gz (481Kb): 481Kb downloaded
    Running setup.py egg_info for package Flask
    Downloading/unpacking Werkzeug>=0.7 (from Flask)
    Downloading Werkzeug-0.8.3.tar.gz (1.1Mb): 1.1Mb downloaded
    Running setup.py egg_info for package Werkzeug
    Downloading/unpacking Jinja2>=2.4 (from Flask)
    Downloading Jinja2-2.6.tar.gz (389Kb): 389Kb downloaded
    Running setup.py egg_info for package Jinja2
    Installing collected packages: Flask, Werkzeug, Jinja2
    Running setup.py install for Flask
    Running setup.py install for Werkzeug
    Running setup.py install for Jinja2
    Successfully installed Flask Werkzeug Jinja2
    Cleaning up...

Create a file called `wsgi.py` with the following code: 

{: .prettyprint .linenums}
    from flask import Flask
    app = Flask(__name__)

    @app.route('/')
    def hello_world():
        return 'Hello World!'

    if __name__ == '__main__':
        app.run()

### Test Your App Locally

{: .prettyprint}
    (venv) $ python wsgi.py
     * Running on http://127.0.0.1:5000/

In another terminal:

{: .prettyprint}
    $ curl 127.0.0.1:5000
    Hello World!% 

### Prepare Your App for Deployment on AppFog



# Django {#django}
