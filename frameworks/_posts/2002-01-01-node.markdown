---
layout: doc-page
title: Node
weight: 1
---

### Supported Versions

For the most reliable development experience, make sure you have the same version of Node.js installed on your local development environment as your target AppFog instance. You can check the available runtimes by running:

{: .prettyprint }
    $ af runtimes
    
    +--------------+-----------------+-----------+
    | Name         | Description     | Version   |
    +--------------+-----------------+-----------+
    | java         | Java 7          | 1.7.0     |
    | php          | PHP 5           | 5.3       |
    | ruby18       | Ruby 1.8.7      | 1.8.7     |
    | ruby192      | Ruby 1.9.2      | 1.9.2p180 |
    | ruby193      | Ruby 1.9.3 p125 | 1.9.3     |
    | python2      | Python 2.7.3    | 2.7.3     |
    | node04       | Node.js 0.4.12  | 0.4.12    |
    | node06       | Node.js 0.6.17  | 0.6.17    |
    | erlangR14B02 | Erlang R14B02   | R14B02    |
    +--------------+-----------------+-----------+

You can download and install the [specific version of Node.js](https://github.com/joyent/node/tags).

Target a specific runtime when you deploy by using the runtime flag. For example, to use Node 0.6.17:

    $ af push --runtime=node06

### Deployment

When you deploy a Node.js app to AppFog, the current directory must contain the app (`app.js`) and, if your app depends on any modules, a `package.json` file that names them.

# "Hello World" Walkthrough

The following is a step-by-step guide to writing and deploying a “hello world” Node.js web server app with the [Express](http://expressjs.com/) web module:

### Create the App

Create a directory for the app and change into it:

{: .prettyprint }
    $ mkdir hello-node
    $ cd hello-node

Use `npm` (Node Package Manager) to install the Express module:

{: .prettyprint }
    $ npm install express

Create a file called `app.js` with the following code:

{: .prettyprint .linenums}
    var app = require('express').createServer();
    app.get('/', function(req, res) {
        res.send('Hello from AppFog');
    });
    app.listen(process.env.VCAP_APP_PORT || 3000);

Notice that Cloud Foundry passes the listen port for your app in an environment variable, accessed by `process.env.VCAP_APP_PORT`.

Create a `package.json` file with the following contents:

{: .prettyprint .linenums}
    {
        "name":"hello-node",
        "version":"0.0.1",
        "dependencies":{
            "express":""
        }
    }

### Deploy the App

{: .prettyprint}
$ af login

Push the app. You can hit `Enter` to accept the defaults at most of the prompts, but be sure to enter a unique `URL` for the app. Here's an example push:

{: .prettyprint}
    $ af push
    Would you like to deploy from the current directory? [Yn]:
    Application Name: hello-node
    Detected a Node.js Application, is this correct? [Yn]:
    Application Deployed URL [hello-node.aws.af.cm]:
    Memory reservation (128M, 256M, 512M, 1G, 2G) [64M]:
    How many instances? [1]:
    Bind existing services to 'hello-node'? [yN]:
    Create services to bind to 'hello-node'? [yN]:
    Would you like to save this configuration? [yN]:
    Creating Application: OK
    Uploading Application:
        Checking for available resources: OK
        Processing resources: OK
        Packing application: OK
        Uploading (255K): OK
    Push Status: OK
    Staging Application 'hello-node': OK
    Starting Application 'hello-node': OK

Hit the app in your browser, http://hello-node.aws.af.cm, in this example.
